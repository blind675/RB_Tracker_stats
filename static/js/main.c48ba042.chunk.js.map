{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","locations","loading","inherits","createClass","key","value","db","firebase","_reloadFirebaseData","_this2","setState","firestore","collection","get","then","dataSnapshot","data","docs","map","doc","hitMapArray","point","lat","latitude","lng","longitude","console","log","catch","error","location","react_default","a","createElement","dist","position","name","length","google","zoom","style","mapStyles","initialCenter","positions","opacity","radius","_this3","flex","objectSpread","_renderMap","Button_default","variant","disabled","onClick","margin","Component","width","height","GoogleApiWrapper","libraries","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c48ba042.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import './App.css';\nimport Button from 'react-bootstrap/Button';\nimport { Map, HeatMap, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyCzenI1WpO2JBbltc3ARFKTCJyUumY-zkk',\n\tauthDomain: 'rbtrack-ab0e9.firebaseapp.com',\n\tdatabaseURL: 'https://rbtrack-ab0e9.firebaseio.com',\n\tprojectId: 'rbtrack-ab0e9',\n\tstorageBucket: 'rbtrack-ab0e9.appspot.com',\n\tmessagingSenderId: '381452575978',\n\tappId: '1:381452575978:web:9999b9c4b6d38967',\n};\n\nexport class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlocations: [],\n\t\t\tloading: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.db = firebase.initializeApp(firebaseConfig);\n\n\t\tthis._reloadFirebaseData();\n\t}\n\n\t_reloadFirebaseData() {\n\t\tthis.setState({\n\t\t\tloading: true,\n\t\t});\n\n\t\tthis.db\n\t\t\t.firestore()\n\t\t\t.collection('geo_points')\n\t\t\t.get()\n\t\t\t.then(dataSnapshot => {\n\t\t\t\tconst data = dataSnapshot.docs.map(doc => doc.data());\n\n\t\t\t\t// generate hit map array\n\t\t\t\tconst hitMapArray = data.map(point => {\n\t\t\t\t\treturn { lat: point.latitude, lng: point.longitude };\n\t\t\t\t});\n\n\t\t\t\tconsole.log(' response: ', data);\n\t\t\t\tconsole.log(' hitmap: ', hitMapArray);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tlocations: hitMapArray,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tlocations: [],\n\t\t\t\t});\n\n\t\t\t\tconsole.log('error:', error);\n\t\t\t});\n\t}\n\n\t_renderPoints() {\n\t\treturn this.state.locations.map(location => {\n\t\t\treturn <Marker position={{ lat: location.latitude, lng: location.longitude }} name={'Test'} />;\n\t\t});\n\t}\n\n\t_renderMap() {\n\t\tif (this.state.locations.length !== 0 ) {\n\t\t\treturn (<Map\n\t\t\t\t\t\tgoogle={this.props.google}\n\t\t\t\t\t\tzoom={16}\n\t\t\t\t\t\tstyle={mapStyles}\n\t\t\t\t\t\tinitialCenter={{ lat: 45.757855, lng: 21.228995 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<HeatMap\n\t\t\t\t\t\t\tpositions={this.state.locations}\n\t\t\t\t\t\t\topacity={0.5}\n\t\t\t\t\t\t\tradius={10}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* {this._renderPoints()} */}\n\t\t\t\t\t</Map>);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{ flex: 1 }}>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\t...mapStyles,\n\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{this._renderMap()}\n\t\t\t\t</div>\n\t\t\t\t<div style={{ flex: 1 }}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\tdisabled={this.state.loading}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis._reloadFirebaseData();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{ margin: 40 }}\n\t\t\t\t\t>\n\t\t\t\t\t\tReload\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t{this.state.loading ? 'loading...' : 'not loading'}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStyles = {\n\twidth: 700,\n\theight: 600,\n};\n\nexport default GoogleApiWrapper({\n\tapiKey: 'AIzaSyArAl-k3E70PTxcFnFhKdilCW37KckQHBM',\n\tlibraries: ['visualization'],\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}